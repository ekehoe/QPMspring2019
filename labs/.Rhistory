## 1.4: Objects and named storage
# The "<-" and "=" symbols are used to assign a variable to a value.
# My personal preference is "<-".
# Create a and b that take on the values of 7 and 8.
a <- 7
## 1.4: Objects and named storage
# The "<-" and "=" symbols are used to assign a variable to a value.
# My personal preference is "<-".
# Create a and b that take on the values of 7 and 8.
a <- 7
# we can perform all of the mathematical functions on a now as if it is any other number
a + 3
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:mgcv", unload=TRUE)
## 1.3: R as a calculator
# Basic arithmetic
# addition
2 + 3
# multiplication
2*3
# division
5/3
# modular arithmetic (11 mod 2)
# "wrap around": 11am + 2 hours = 1pm
11%% 2
# Calculate 67 + 6
67+6
# Calculate 67 + 6
67+6
print(a)
a
y
# You can overide previous code by assigning altenative values.
y <- 3
y <- 7
x <- (y-8) + 7
x
y
y
# You can overide previous code by assigning altenative values.
y <- 3
y
y
y <- 7
y
x <- 100
x <- b(100, 50, 1)
x <- c(100, 50, 1)
## more example: turnout in Alaska
total.votes.ak <-  238307
x <- c(100, 50, 1)
x <- c(100, 50, 1)
polling.stations + households
polling.stations + households
objects() # List the objects currently on your global
objects() # List the objects currently on your global
polling.stations <- 10
households <- 100
polling.stations + households
polling.stations <- 10
households <- 100
polling.stations + households
objects()
rm(list =ls())
x <- 50
y <- c(100,50,60)
z <- c(200, 40, 80) + x
y+z
rm(list =ls())
[56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32] <- m
["56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32"] <- m
"56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32" <- m
"56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32" = m
m <- "56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32"
m <- [56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32]
m <- "56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32"
w <- "47, 49, 20, 46, 43, 44, 45, 60, 57, 28, 55, 27, 25, 50, 52, 48, 23, 42, 33, 59"
c (56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32)
w <- c
m <- c
View(w)
m <- c(56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32)
w <- m
rm(list =ls(m))
ls()
rm(list=c("m","w")
rm("m","w")
rm(m)
rm(w)
c(56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32)
m <- c(56, 60, 50, 26, 45, 35, 41, 43, 34, 42, 37, 39, 33, 28, 52, 48, 27, 20, 44, 32)
c(47, 49, 20, 46, 43, 44, 45, 60, 57, 28, 55, 27, 25, 50, 52, 48, 23, 42, 33, 59)
w <- c(47, 49, 20, 46, 43, 44, 45, 60, 57, 28, 55, 27, 25, 50, 52, 48, 23, 42, 33, 59)
boxplot (m, xlab="Men", main="")
boxplot (w, ylab="Women", main="")
boxplot (m, ylab="Age", main="")
boxplot (w, ylab="Women", main="")
boxplot (m, xlab="Men", ylab="age", main="")
boxplot (w, xlab="Women", ylab="age", main="")
set.seed (123)
n.samples = 1000
##you get 1000 means, for each sample you do it 20 times
sample.size = 20
x.bars = rep(NA, n.samples)
abline(v= mean(random_normal))
plot(density(random_normal), col = "blue")
abline(v= mean(random_normal))
## Visualize the two different distributions by taking 1 million random draws
## Note: this is different than what you need to do in the homework!
random_normal <- rnorm(1000000)
random_t <- rt(1000000, df = 5)
plot(density(random_normal), col = "blue")
abline(v= mean(random_normal))
lines(density(random_t), col = "red")
legend("topright", legend = c("Normal", "T"), col = c("blue", "red"), lty = 1)
pt(-2, df = 10)
getwd()
load("anes.Rdata")
load ("anes.Rdata")
load ("anes.Rdata")
getwd()
## Load the data: a subset of 2004 American National Election Study
load("anes.Rdata")
setwd("~/Documents/GitHub/QPMspring2019")
## Load the data: a subset of 2004 American National Election Study
load("lab5/anes.Rdata")
setwd("~/Documents/GitHub/QPMspring2019/labs/")
## Load the data: a subset of 2004 American National Election Study
load("lab5/anes.Rdata")
setwd("~/Documents/GitHub/QPMspring2019/labs/")
##value at which we should find the quartile co-effecient, lower:tail=FALSE means
#you take first value
n <- length(na.omit(anes$bushiraq))
## Let's say our confidence coefficient = .95
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)## (1-confidence coefficient)/2
##value at which we should find the quartile co-effecient, lower:tail=FALSE means
#you take first value
n <- length(na.omit(anes$bushiraq))
## Let's say our confidence coefficient = .95
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)## (1-confidence coefficient)/2
## Let's say our confidence coefficient = .95
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE) ## (1-confidence coefficient)/2
## Let's say our confidence coefficient = .95
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE) ## (1-confidence coefficient)/2
z95
n
sample_mean
sample_mean <- mean(anes$bushiraq, na.rm = TRUE)
sample_mean
sample_sd
sample_sd
#function for standard deviation-sd
lower_95 <- sample_mean - (z95 * (sample_sd/sqrt(n)))
sample_mean <- mean(anes$bushiraq, na.rm = TRUE)
sample_sd <- sd(anes$bushiraq, na.rm = TRUE)
sample_sd
## 2. Load data using the following code
## Read the help file
install.packages("faraway")
library(faraway)
data(africa)
?africa
## 3. Create two subsets of the data
## 3. Create two subsets of the data
## One with only countries were no military coups have occurred
## 3. Create two subsets of the data
## One with only countries were no military coups have occurred
## One where any military coups have occurred
colnames(africa)
subset(1) <- africa[,c("miltcoup")]
subset(1) <- africa[,c("miltcoup",)]
subset(1) <- africa$miltcoup=0
subset1 <- africa$miltcoup[0,]
subset1 <- africa$miltcoup[0,c]
?subset1
## 3. Create two subsets of the data
## One with only countries were no military coups have occurred
## One where any military coups have occurred
colnames(africa)
noCoups <- africa[africa$miltcoup=0,]
noCoups <- africa[africa$miltcoup=0,]
noCoups <- africa[africa$miltcoup==0,]
noCoups <- africa[africa$miltcoup==0,]
noCoups <- africa[africa$miltcoup==0,]
anyCoups <- africa[africa$miltcoup!=0,]
mean(noCoups, na.rm = T)
zScore <- qnorm((1-.95/2), lower.tail = F)
mean(noCoups, na.rm = T)
qnorm((1-.95/2), lower.tail = F)
mean(noCoups, na.rm = T)
mean (noCoups, na.rm = T)
mean(noCoups$pctvote, na.rm = T)
mean(noCoups$pctvote, na.rm = T) + zScore * (sd(noCoups)/sqrt(length(noCoups)))
mean(noCoups$pctvote, na.rm = T) + zScore * (sd(noCoups$pctvote, na.rm = T)/sqrt(length(noCoups$pctvote)))
zScore <- qnorm((1-.95)/2, lower.tail = F)
mean(noCoups$pctvote, na.rm = T) + zScore * (sd(noCoups$pctvote, na.rm = T)/sqrt(length(noCoups$pctvote)))
zScore <- qnorm((1-.95)/2, lower.tail = F)
mean(noCoups$pctvote, na.rm = T) + zScore * (sd(noCoups$pctvote, na.rm = T)/sqrt(length(noCoups$pctvote)))
zScore <- qnorm((1-.95)/2, lower.tail = F)
zScore <- qnorm((1-.95)/2, lower.tail = F)
zScore <- qnorm((1-.95)/2, lower.tail = F)
mean(noCoups$pctvote, na.rm = T) - zScore * (sd(noCoups$pctvote, na.rm = T)/sqrt(length(noCoups$pctvote)))
sd(noCoups$pctvote)
zScore
